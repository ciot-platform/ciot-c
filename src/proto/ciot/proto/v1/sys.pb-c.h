/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ciot/proto/v1/sys.proto */

#ifndef PROTOBUF_C_ciot_2fproto_2fv1_2fsys_2eproto__INCLUDED
#define PROTOBUF_C_ciot_2fproto_2fv1_2fsys_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ciot__SysCfg Ciot__SysCfg;
typedef struct _Ciot__SysFeatures Ciot__SysFeatures;
typedef struct _Ciot__SysInfo Ciot__SysInfo;
typedef struct _Ciot__SysStatus Ciot__SysStatus;
typedef struct _Ciot__SysReq Ciot__SysReq;
typedef struct _Ciot__SysData Ciot__SysData;


/* --- enums --- */

/*
 * Enum representing different types of system requests.
 */
typedef enum _Ciot__SysReqType {
  /*
   * Unknown system request type.
   */
  CIOT__SYS_REQ_TYPE__SYS_REQ_TYPE_UNKOWN = 0,
  /*
   * System restart request.
   */
  CIOT__SYS_REQ_TYPE__SYS_REQ_TYPE_RESTART = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__SYS_REQ_TYPE)
} Ciot__SysReqType;
/*
 * Enum representing hardware features of the system.
 */
typedef enum _Ciot__SysHwFeatures {
  /*
   * Storage feature.
   */
  CIOT__SYS_HW_FEATURES__SYS_FEATURE_STORAGE = 0,
  /*
   * System feature.
   */
  CIOT__SYS_HW_FEATURES__SYS_FEATURE_SYSTEM = 1,
  /*
   * UART feature.
   */
  CIOT__SYS_HW_FEATURES__SYS_FEATURE_UART = 2,
  /*
   * USB feature.
   */
  CIOT__SYS_HW_FEATURES__SYS_FEATURE_USB = 3,
  /*
   * Ethernet feature.
   */
  CIOT__SYS_HW_FEATURES__SYS_FEATURE_ETHERNET = 4,
  /*
   * WiFi feature.
   */
  CIOT__SYS_HW_FEATURES__SYS_FEATURE_WIFI = 5,
  /*
   * Bluetooth Low Energy (BLE) Scanner feature.
   */
  CIOT__SYS_HW_FEATURES__SYS_FEATURE_BLE_SCN = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__SYS_HW_FEATURES)
} Ciot__SysHwFeatures;
/*
 * Enum representing software features of the system.
 */
typedef enum _Ciot__SysSwFeatures {
  /*
   * NTP feature.
   */
  CIOT__SYS_SW_FEATURES__SYS_FEATURE_NTP = 0,
  /*
   * OTA (Over-the-Air update) feature.
   */
  CIOT__SYS_SW_FEATURES__SYS_FEATURE_OTA = 1,
  /*
   * HTTP client feature.
   */
  CIOT__SYS_SW_FEATURES__SYS_FEATURE_HTTP_CLIENT = 2,
  /*
   * HTTP server feature.
   */
  CIOT__SYS_SW_FEATURES__SYS_FEATURE_HTTP_SERVER = 3,
  /*
   * MQTT client feature.
   */
  CIOT__SYS_SW_FEATURES__SYS_FEATURE_MQTT_CLIENT = 4,
  /*
   * Timer feature.
   */
  CIOT__SYS_SW_FEATURES__SYS_FEATURE_TIMER = 5,
  /*
   * Serialization feature.
   */
  CIOT__SYS_SW_FEATURES__SYS_FEATURE_SERIALIZATION = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__SYS_SW_FEATURES)
} Ciot__SysSwFeatures;

/* --- messages --- */

/*
 * Message representing configuration for the system.
 */
struct  _Ciot__SysCfg
{
  ProtobufCMessage base;
};
#define CIOT__SYS_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__sys_cfg__descriptor) \
     }


/*
 * Message representing system features.
 */
struct  _Ciot__SysFeatures
{
  ProtobufCMessage base;
  /*
   * Hardware features bitmask.
   */
  uint32_t hw;
  /*
   * Software features bitmask.
   */
  uint32_t sw;
};
#define CIOT__SYS_FEATURES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__sys_features__descriptor) \
    , 0, 0 }


/*
 * Message representing system information.
 */
struct  _Ciot__SysInfo
{
  ProtobufCMessage base;
  /*
   * Hardware name.
   */
  char *hw_name;
  /*
   * Application version.
   */
  ProtobufCBinaryData app_ver;
  /*
   * System features.
   */
  Ciot__SysFeatures *features;
};
#define CIOT__SYS_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__sys_info__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, NULL }


/*
 * Message representing system status.
 */
struct  _Ciot__SysStatus
{
  ProtobufCMessage base;
  /*
   * Reason for the last reset.
   */
  uint32_t reset_reason;
  /*
   * Number of resets.
   */
  uint32_t reset_count;
  /*
   * Amount of free memory.
   */
  uint32_t free_memory;
  /*
   * Lifetime of the system.
   */
  uint32_t lifetime;
  /*
   * System information.
   */
  Ciot__SysInfo *info;
};
#define CIOT__SYS_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__sys_status__descriptor) \
    , 0, 0, 0, 0, NULL }


/*
 * Message representing a system request.
 */
struct  _Ciot__SysReq
{
  ProtobufCMessage base;
  /*
   * Type of the system request.
   */
  Ciot__SysReqType type;
};
#define CIOT__SYS_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__sys_req__descriptor) \
    , CIOT__SYS_REQ_TYPE__SYS_REQ_TYPE_UNKOWN }


/*
 * Message representing data for the system.
 */
struct  _Ciot__SysData
{
  ProtobufCMessage base;
  /*
   * Configuration for the system.
   */
  Ciot__SysCfg *config;
  /*
   * Status of the system.
   */
  Ciot__SysStatus *status;
  /*
   * System request data.
   */
  Ciot__SysReq *request;
};
#define CIOT__SYS_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__sys_data__descriptor) \
    , NULL, NULL, NULL }


/* Ciot__SysCfg methods */
void   ciot__sys_cfg__init
                     (Ciot__SysCfg         *message);
size_t ciot__sys_cfg__get_packed_size
                     (const Ciot__SysCfg   *message);
size_t ciot__sys_cfg__pack
                     (const Ciot__SysCfg   *message,
                      uint8_t             *out);
size_t ciot__sys_cfg__pack_to_buffer
                     (const Ciot__SysCfg   *message,
                      ProtobufCBuffer     *buffer);
Ciot__SysCfg *
       ciot__sys_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__sys_cfg__free_unpacked
                     (Ciot__SysCfg *message,
                      ProtobufCAllocator *allocator);
/* Ciot__SysFeatures methods */
void   ciot__sys_features__init
                     (Ciot__SysFeatures         *message);
size_t ciot__sys_features__get_packed_size
                     (const Ciot__SysFeatures   *message);
size_t ciot__sys_features__pack
                     (const Ciot__SysFeatures   *message,
                      uint8_t             *out);
size_t ciot__sys_features__pack_to_buffer
                     (const Ciot__SysFeatures   *message,
                      ProtobufCBuffer     *buffer);
Ciot__SysFeatures *
       ciot__sys_features__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__sys_features__free_unpacked
                     (Ciot__SysFeatures *message,
                      ProtobufCAllocator *allocator);
/* Ciot__SysInfo methods */
void   ciot__sys_info__init
                     (Ciot__SysInfo         *message);
size_t ciot__sys_info__get_packed_size
                     (const Ciot__SysInfo   *message);
size_t ciot__sys_info__pack
                     (const Ciot__SysInfo   *message,
                      uint8_t             *out);
size_t ciot__sys_info__pack_to_buffer
                     (const Ciot__SysInfo   *message,
                      ProtobufCBuffer     *buffer);
Ciot__SysInfo *
       ciot__sys_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__sys_info__free_unpacked
                     (Ciot__SysInfo *message,
                      ProtobufCAllocator *allocator);
/* Ciot__SysStatus methods */
void   ciot__sys_status__init
                     (Ciot__SysStatus         *message);
size_t ciot__sys_status__get_packed_size
                     (const Ciot__SysStatus   *message);
size_t ciot__sys_status__pack
                     (const Ciot__SysStatus   *message,
                      uint8_t             *out);
size_t ciot__sys_status__pack_to_buffer
                     (const Ciot__SysStatus   *message,
                      ProtobufCBuffer     *buffer);
Ciot__SysStatus *
       ciot__sys_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__sys_status__free_unpacked
                     (Ciot__SysStatus *message,
                      ProtobufCAllocator *allocator);
/* Ciot__SysReq methods */
void   ciot__sys_req__init
                     (Ciot__SysReq         *message);
size_t ciot__sys_req__get_packed_size
                     (const Ciot__SysReq   *message);
size_t ciot__sys_req__pack
                     (const Ciot__SysReq   *message,
                      uint8_t             *out);
size_t ciot__sys_req__pack_to_buffer
                     (const Ciot__SysReq   *message,
                      ProtobufCBuffer     *buffer);
Ciot__SysReq *
       ciot__sys_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__sys_req__free_unpacked
                     (Ciot__SysReq *message,
                      ProtobufCAllocator *allocator);
/* Ciot__SysData methods */
void   ciot__sys_data__init
                     (Ciot__SysData         *message);
size_t ciot__sys_data__get_packed_size
                     (const Ciot__SysData   *message);
size_t ciot__sys_data__pack
                     (const Ciot__SysData   *message,
                      uint8_t             *out);
size_t ciot__sys_data__pack_to_buffer
                     (const Ciot__SysData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__SysData *
       ciot__sys_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__sys_data__free_unpacked
                     (Ciot__SysData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ciot__SysCfg_Closure)
                 (const Ciot__SysCfg *message,
                  void *closure_data);
typedef void (*Ciot__SysFeatures_Closure)
                 (const Ciot__SysFeatures *message,
                  void *closure_data);
typedef void (*Ciot__SysInfo_Closure)
                 (const Ciot__SysInfo *message,
                  void *closure_data);
typedef void (*Ciot__SysStatus_Closure)
                 (const Ciot__SysStatus *message,
                  void *closure_data);
typedef void (*Ciot__SysReq_Closure)
                 (const Ciot__SysReq *message,
                  void *closure_data);
typedef void (*Ciot__SysData_Closure)
                 (const Ciot__SysData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ciot__sys_req_type__descriptor;
extern const ProtobufCEnumDescriptor    ciot__sys_hw_features__descriptor;
extern const ProtobufCEnumDescriptor    ciot__sys_sw_features__descriptor;
extern const ProtobufCMessageDescriptor ciot__sys_cfg__descriptor;
extern const ProtobufCMessageDescriptor ciot__sys_features__descriptor;
extern const ProtobufCMessageDescriptor ciot__sys_info__descriptor;
extern const ProtobufCMessageDescriptor ciot__sys_status__descriptor;
extern const ProtobufCMessageDescriptor ciot__sys_req__descriptor;
extern const ProtobufCMessageDescriptor ciot__sys_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ciot_2fproto_2fv1_2fsys_2eproto__INCLUDED */
