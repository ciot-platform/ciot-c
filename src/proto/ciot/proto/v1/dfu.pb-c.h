/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ciot/proto/v1/dfu.proto */

#ifndef PROTOBUF_C_ciot_2fproto_2fv1_2fdfu_2eproto__INCLUDED
#define PROTOBUF_C_ciot_2fproto_2fv1_2fdfu_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ciot__DfuCfg Ciot__DfuCfg;
typedef struct _Ciot__DfuStatus Ciot__DfuStatus;
typedef struct _Ciot__DfuReq Ciot__DfuReq;
typedef struct _Ciot__DfuData Ciot__DfuData;


/* --- enums --- */

/*
 * Possible dfu states
 */
typedef enum _Ciot__DfuState {
  /*
   * Idle state
   */
  CIOT__DFU_STATE__DFU_STATE_IDLE = 0,
  /*
   * Dfu in progress
   */
  CIOT__DFU_STATE__DFU_STATE_IN_PROGRESS = 1,
  /*
   * Dfu completed
   */
  CIOT__DFU_STATE__DFU_STATE_COMPLETED = 2,
  /*
   * Dfu error
   */
  CIOT__DFU_STATE__DFU_STATE_ERROR = -1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__DFU_STATE)
} Ciot__DfuState;
/*
 * Dfu request types
 */
typedef enum _Ciot__DfuReqType {
  /*
   * Unknown request type
   */
  CIOT__DFU_REQ_TYPE__DFU_REQ_TYPE_UNKOWN = 0,
  /*
   * Request to send firmware over dfu interface
   */
  CIOT__DFU_REQ_TYPE__DFU_REQ_SEND_FIRMWARE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__DFU_REQ_TYPE)
} Ciot__DfuReqType;
/*
 * Dfu types
 */
typedef enum _Ciot__DfuType {
  /*
   * Unknown type
   */
  CIOT__DFU_TYPE__DFU_TYPE_UNKNOWN = 0,
  /*
   * Dfu over uart
   */
  CIOT__DFU_TYPE__DFU_TYPE_UART = 1,
  /*
   * Dfu over USB
   */
  CIOT__DFU_TYPE__DFU_TYPE_USB = 2,
  /*
   * Dfu over bluetooth low energy
   */
  CIOT__DFU_TYPE__DFU_TYPE_BLE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__DFU_TYPE)
} Ciot__DfuType;

/* --- messages --- */

/*
 * Dfu configuration
 */
struct  _Ciot__DfuCfg
{
  ProtobufCMessage base;
  Ciot__DfuType type;
};
#define CIOT__DFU_CFG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__dfu_cfg__descriptor) \
    , CIOT__DFU_TYPE__DFU_TYPE_UNKNOWN }


/*
 * Dfu status
 */
struct  _Ciot__DfuStatus
{
  ProtobufCMessage base;
  /*
   * Dfu current state
   */
  Ciot__DfuState state;
  /*
   * Dfu response/status code
   */
  int32_t code;
  /*
   * Dfu error code
   */
  int32_t error;
  /*
   * Dfu image size
   */
  uint32_t image_size;
  /*
   * Dfu image written on client
   */
  uint32_t image_written;
};
#define CIOT__DFU_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__dfu_status__descriptor) \
    , CIOT__DFU_STATE__DFU_STATE_IDLE, 0, 0, 0, 0 }


/*
 * Dfu request
 */
struct  _Ciot__DfuReq
{
  ProtobufCMessage base;
  /*
   * Request type
   */
  Ciot__DfuReqType type;
};
#define CIOT__DFU_REQ__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__dfu_req__descriptor) \
    , CIOT__DFU_REQ_TYPE__DFU_REQ_TYPE_UNKOWN }


/*
 * Dfu data
 */
struct  _Ciot__DfuData
{
  ProtobufCMessage base;
  /*
   * Dfu configuration data
   */
  Ciot__DfuCfg *config;
  /*
   * Dfu status data
   */
  Ciot__DfuStatus *status;
  /*
   * Dfu request data
   */
  Ciot__DfuReq *request;
};
#define CIOT__DFU_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__dfu_data__descriptor) \
    , NULL, NULL, NULL }


/* Ciot__DfuCfg methods */
void   ciot__dfu_cfg__init
                     (Ciot__DfuCfg         *message);
size_t ciot__dfu_cfg__get_packed_size
                     (const Ciot__DfuCfg   *message);
size_t ciot__dfu_cfg__pack
                     (const Ciot__DfuCfg   *message,
                      uint8_t             *out);
size_t ciot__dfu_cfg__pack_to_buffer
                     (const Ciot__DfuCfg   *message,
                      ProtobufCBuffer     *buffer);
Ciot__DfuCfg *
       ciot__dfu_cfg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__dfu_cfg__free_unpacked
                     (Ciot__DfuCfg *message,
                      ProtobufCAllocator *allocator);
/* Ciot__DfuStatus methods */
void   ciot__dfu_status__init
                     (Ciot__DfuStatus         *message);
size_t ciot__dfu_status__get_packed_size
                     (const Ciot__DfuStatus   *message);
size_t ciot__dfu_status__pack
                     (const Ciot__DfuStatus   *message,
                      uint8_t             *out);
size_t ciot__dfu_status__pack_to_buffer
                     (const Ciot__DfuStatus   *message,
                      ProtobufCBuffer     *buffer);
Ciot__DfuStatus *
       ciot__dfu_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__dfu_status__free_unpacked
                     (Ciot__DfuStatus *message,
                      ProtobufCAllocator *allocator);
/* Ciot__DfuReq methods */
void   ciot__dfu_req__init
                     (Ciot__DfuReq         *message);
size_t ciot__dfu_req__get_packed_size
                     (const Ciot__DfuReq   *message);
size_t ciot__dfu_req__pack
                     (const Ciot__DfuReq   *message,
                      uint8_t             *out);
size_t ciot__dfu_req__pack_to_buffer
                     (const Ciot__DfuReq   *message,
                      ProtobufCBuffer     *buffer);
Ciot__DfuReq *
       ciot__dfu_req__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__dfu_req__free_unpacked
                     (Ciot__DfuReq *message,
                      ProtobufCAllocator *allocator);
/* Ciot__DfuData methods */
void   ciot__dfu_data__init
                     (Ciot__DfuData         *message);
size_t ciot__dfu_data__get_packed_size
                     (const Ciot__DfuData   *message);
size_t ciot__dfu_data__pack
                     (const Ciot__DfuData   *message,
                      uint8_t             *out);
size_t ciot__dfu_data__pack_to_buffer
                     (const Ciot__DfuData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__DfuData *
       ciot__dfu_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__dfu_data__free_unpacked
                     (Ciot__DfuData *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ciot__DfuCfg_Closure)
                 (const Ciot__DfuCfg *message,
                  void *closure_data);
typedef void (*Ciot__DfuStatus_Closure)
                 (const Ciot__DfuStatus *message,
                  void *closure_data);
typedef void (*Ciot__DfuReq_Closure)
                 (const Ciot__DfuReq *message,
                  void *closure_data);
typedef void (*Ciot__DfuData_Closure)
                 (const Ciot__DfuData *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ciot__dfu_state__descriptor;
extern const ProtobufCEnumDescriptor    ciot__dfu_req_type__descriptor;
extern const ProtobufCEnumDescriptor    ciot__dfu_type__descriptor;
extern const ProtobufCMessageDescriptor ciot__dfu_cfg__descriptor;
extern const ProtobufCMessageDescriptor ciot__dfu_status__descriptor;
extern const ProtobufCMessageDescriptor ciot__dfu_req__descriptor;
extern const ProtobufCMessageDescriptor ciot__dfu_data__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ciot_2fproto_2fv1_2fdfu_2eproto__INCLUDED */
