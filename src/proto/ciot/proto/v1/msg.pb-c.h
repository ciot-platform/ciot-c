/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ciot/proto/v1/msg.proto */

#ifndef PROTOBUF_C_ciot_2fproto_2fv1_2fmsg_2eproto__INCLUDED
#define PROTOBUF_C_ciot_2fproto_2fv1_2fmsg_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "ciot/proto/v1/ble_adv.pb-c.h"
#include "ciot/proto/v1/ble_scn.pb-c.h"
#include "ciot/proto/v1/ble.pb-c.h"
#include "ciot/proto/v1/ciot.pb-c.h"
#include "ciot/proto/v1/dfu.pb-c.h"
#include "ciot/proto/v1/errors.pb-c.h"
#include "ciot/proto/v1/http_client.pb-c.h"
#include "ciot/proto/v1/http_server.pb-c.h"
#include "ciot/proto/v1/logger.pb-c.h"
#include "ciot/proto/v1/model.pb-c.h"
#include "ciot/proto/v1/mqtt_client.pb-c.h"
#include "ciot/proto/v1/ntp.pb-c.h"
#include "ciot/proto/v1/ota.pb-c.h"
#include "ciot/proto/v1/storage.pb-c.h"
#include "ciot/proto/v1/socket.pb-c.h"
#include "ciot/proto/v1/sys.pb-c.h"
#include "ciot/proto/v1/tcp.pb-c.h"
#include "ciot/proto/v1/uart.pb-c.h"
#include "ciot/proto/v1/usb.pb-c.h"
#include "ciot/proto/v1/wifi.pb-c.h"

typedef struct _Ciot__IfaceInfo Ciot__IfaceInfo;
typedef struct _Ciot__MsgError Ciot__MsgError;
typedef struct _Ciot__MsgData Ciot__MsgData;
typedef struct _Ciot__MsgHeader Ciot__MsgHeader;
typedef struct _Ciot__Msg Ciot__Msg;


/* --- enums --- */

/*
 * Enum representing different types of messages.
 */
typedef enum _Ciot__MsgType {
  /*
   * Unknown message type.
   */
  CIOT__MSG_TYPE__MSG_TYPE_UNKNOWN = 0,
  /*
   * Custom message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_CUSTOM = 1,
  /*
   * Start message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_START = 2,
  /*
   * Stop message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_STOP = 3,
  /*
   * configuration message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_CONFIG = 4,
  /*
   * information message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_INFO = 5,
  /*
   * status message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_STATUS = 6,
  /*
   * Request message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_REQUEST = 7,
  /*
   * Send payload message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_SEND_PAYLOAD = 8,
  /*
   * Error message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_ERROR = 9,
  /*
   * Event message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_EVENT = 10,
  /*
   * Log message.
   */
  CIOT__MSG_TYPE__MSG_TYPE_LOG = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__MSG_TYPE)
} Ciot__MsgType;
/*
 * Enum representing different interface types.
 */
typedef enum _Ciot__IfaceType {
  /*
   * Unknown interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_UNKNOWN = 0,
  /*
   * Custom interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_CUSTOM = 1,
  /*
   * CIOT interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_CIOT = 2,
  /*
   * Storage interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_STORAGE = 3,
  /*
   * System interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_SYS = 4,
  /*
   * UART interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_UART = 5,
  /*
   * USB interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_USB = 6,
  /*
   * TCP interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_TCP = 7,
  /*
   * Ethernet interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_ETH = 8,
  /*
   * WiFi interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_WIFI = 9,
  /*
   * BLE interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_BLE = 10,
  /*
   * BLE SCN interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_BLE_SCN = 11,
  /*
   * BLE ADV interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_BLE_ADV = 12,
  /*
   * GPIO interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_GPIO = 13,
  /*
   * NTP interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_NTP = 14,
  /*
   * OTA interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_OTA = 15,
  /*
   * DFU interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_DFU = 16,
  /*
   * HTTP Client interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_HTTP_CLIENT = 17,
  /*
   * HTTP Server interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_HTTP_SERVER = 18,
  /*
   * MQTT interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_MQTT = 19,
  /*
   * Socket interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_SOCKET = 20,
  /*
   * Bridge interface type.
   */
  CIOT__IFACE_TYPE__IFACE_TYPE_BRIDGE = 21
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CIOT__IFACE_TYPE)
} Ciot__IfaceType;

/* --- messages --- */

/*
 * Message representing information about an interface.
 */
struct  _Ciot__IfaceInfo
{
  ProtobufCMessage base;
  /*
   * Interface ID.
   */
  uint32_t id;
  /*
   * Interface type.
   */
  Ciot__IfaceType type;
};
#define CIOT__IFACE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__iface_info__descriptor) \
    , 0, CIOT__IFACE_TYPE__IFACE_TYPE_UNKNOWN }


/*
 * Message representing error details for a message.
 */
struct  _Ciot__MsgError
{
  ProtobufCMessage base;
  /*
   * Type of the message.
   */
  Ciot__MsgHeader *msg;
  /*
   * Interface information.
   */
  Ciot__IfaceInfo *iface;
  /*
   * Error code.
   */
  CiotErr code;
};
#define CIOT__MSG_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__msg_error__descriptor) \
    , NULL, NULL, CIOT_ERR__OK }


/*
 * Message representing data for a message.
 */
struct  _Ciot__MsgData
{
  ProtobufCMessage base;
  /*
   * Error data.
   */
  Ciot__MsgError *error;
  /*
   * Payload data.
   */
  ProtobufCBinaryData payload;
  /*
   * Model data.
   */
  Ciot__ModelData *model;
  /*
   * Log data.
   */
  Ciot__Log *log;
  /*
   * CIOT data.
   */
  Ciot__CiotData *ciot;
  /*
   * Storage data.
   */
  Ciot__StorageData *storage;
  /*
   * System data.
   */
  Ciot__SysData *sys;
  /*
   * UART data.
   */
  Ciot__UartData *uart;
  /*
   * USB data.
   */
  Ciot__UsbData *usb;
  /*
   * TCP data.
   */
  Ciot__TcpData *tcp;
  /*
   * Ethernet data.
   */
  Ciot__TcpData *eth;
  /*
   * WiFi data.
   */
  Ciot__WifiData *wifi;
  /*
   * BLE data.
   */
  Ciot__BleData *ble;
  /*
   * BLE SCN data.
   */
  Ciot__BleScnData *ble_scn;
  /*
   * BLE ADV data.
   */
  Ciot__BleAdvData *ble_adv;
  /*
   * NTP data.
   */
  Ciot__NtpData *ntp;
  /*
   * OTA data.
   */
  Ciot__OtaData *ota;
  /*
   * DFU data.
   */
  Ciot__DfuData *dfu;
  /*
   * HTTP Server data.
   */
  Ciot__HttpServerData *http_server;
  /*
   * HTTP Client data.
   */
  Ciot__HttpClientData *http_client;
  /*
   * MQTT Client data.
   */
  Ciot__MqttClientData *mqtt_client;
  /*
   * Socket data.
   */
  Ciot__SocketData *socket;
};
#define CIOT__MSG_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__msg_data__descriptor) \
    , NULL, {0,NULL}, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Message representing the header of a message.
 */
struct  _Ciot__MsgHeader
{
  ProtobufCMessage base;
  /*
   * Message ID.
   */
  uint32_t id;
  /*
   * Message type.
   */
  Ciot__MsgType type;
  /*
   * Interface information.
   */
  Ciot__IfaceInfo *iface;
};
#define CIOT__MSG_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__msg_header__descriptor) \
    , 0, CIOT__MSG_TYPE__MSG_TYPE_UNKNOWN, NULL }


/*
 * Represents an CioT message
 */
struct  _Ciot__Msg
{
  ProtobufCMessage base;
  /*
   * Message ID.
   */
  uint32_t id;
  /*
   * Message type.
   */
  Ciot__MsgType type;
  /*
   * Interface information.
   */
  Ciot__IfaceInfo *iface;
  /*
   * Message data.
   */
  Ciot__MsgData *data;
};
#define CIOT__MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ciot__msg__descriptor) \
    , 0, CIOT__MSG_TYPE__MSG_TYPE_UNKNOWN, NULL, NULL }


/* Ciot__IfaceInfo methods */
void   ciot__iface_info__init
                     (Ciot__IfaceInfo         *message);
size_t ciot__iface_info__get_packed_size
                     (const Ciot__IfaceInfo   *message);
size_t ciot__iface_info__pack
                     (const Ciot__IfaceInfo   *message,
                      uint8_t             *out);
size_t ciot__iface_info__pack_to_buffer
                     (const Ciot__IfaceInfo   *message,
                      ProtobufCBuffer     *buffer);
Ciot__IfaceInfo *
       ciot__iface_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__iface_info__free_unpacked
                     (Ciot__IfaceInfo *message,
                      ProtobufCAllocator *allocator);
/* Ciot__MsgError methods */
void   ciot__msg_error__init
                     (Ciot__MsgError         *message);
size_t ciot__msg_error__get_packed_size
                     (const Ciot__MsgError   *message);
size_t ciot__msg_error__pack
                     (const Ciot__MsgError   *message,
                      uint8_t             *out);
size_t ciot__msg_error__pack_to_buffer
                     (const Ciot__MsgError   *message,
                      ProtobufCBuffer     *buffer);
Ciot__MsgError *
       ciot__msg_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__msg_error__free_unpacked
                     (Ciot__MsgError *message,
                      ProtobufCAllocator *allocator);
/* Ciot__MsgData methods */
void   ciot__msg_data__init
                     (Ciot__MsgData         *message);
size_t ciot__msg_data__get_packed_size
                     (const Ciot__MsgData   *message);
size_t ciot__msg_data__pack
                     (const Ciot__MsgData   *message,
                      uint8_t             *out);
size_t ciot__msg_data__pack_to_buffer
                     (const Ciot__MsgData   *message,
                      ProtobufCBuffer     *buffer);
Ciot__MsgData *
       ciot__msg_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__msg_data__free_unpacked
                     (Ciot__MsgData *message,
                      ProtobufCAllocator *allocator);
/* Ciot__MsgHeader methods */
void   ciot__msg_header__init
                     (Ciot__MsgHeader         *message);
size_t ciot__msg_header__get_packed_size
                     (const Ciot__MsgHeader   *message);
size_t ciot__msg_header__pack
                     (const Ciot__MsgHeader   *message,
                      uint8_t             *out);
size_t ciot__msg_header__pack_to_buffer
                     (const Ciot__MsgHeader   *message,
                      ProtobufCBuffer     *buffer);
Ciot__MsgHeader *
       ciot__msg_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__msg_header__free_unpacked
                     (Ciot__MsgHeader *message,
                      ProtobufCAllocator *allocator);
/* Ciot__Msg methods */
void   ciot__msg__init
                     (Ciot__Msg         *message);
size_t ciot__msg__get_packed_size
                     (const Ciot__Msg   *message);
size_t ciot__msg__pack
                     (const Ciot__Msg   *message,
                      uint8_t             *out);
size_t ciot__msg__pack_to_buffer
                     (const Ciot__Msg   *message,
                      ProtobufCBuffer     *buffer);
Ciot__Msg *
       ciot__msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ciot__msg__free_unpacked
                     (Ciot__Msg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ciot__IfaceInfo_Closure)
                 (const Ciot__IfaceInfo *message,
                  void *closure_data);
typedef void (*Ciot__MsgError_Closure)
                 (const Ciot__MsgError *message,
                  void *closure_data);
typedef void (*Ciot__MsgData_Closure)
                 (const Ciot__MsgData *message,
                  void *closure_data);
typedef void (*Ciot__MsgHeader_Closure)
                 (const Ciot__MsgHeader *message,
                  void *closure_data);
typedef void (*Ciot__Msg_Closure)
                 (const Ciot__Msg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ciot__msg_type__descriptor;
extern const ProtobufCEnumDescriptor    ciot__iface_type__descriptor;
extern const ProtobufCMessageDescriptor ciot__iface_info__descriptor;
extern const ProtobufCMessageDescriptor ciot__msg_error__descriptor;
extern const ProtobufCMessageDescriptor ciot__msg_data__descriptor;
extern const ProtobufCMessageDescriptor ciot__msg_header__descriptor;
extern const ProtobufCMessageDescriptor ciot__msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ciot_2fproto_2fv1_2fmsg_2eproto__INCLUDED */
