# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ciot/proto/v1/errors.proto

from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='ciot/proto/v1/errors.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n\x1a\x63iot/proto/v1/errors.proto*\xfa\x03\n\x07\x43iotErr\x12\x06\n\x02OK\x10\x00\x12\x0c\n\x08NULL_ARG\x10\x01\x12\x0e\n\nINVALID_ID\x10\x02\x12\x10\n\x0cINVALID_TYPE\x10\x03\x12\x0c\n\x08OVERFLOW\x10\x04\x12\x13\n\x0fNOT_IMPLEMENTED\x10\x05\x12\x11\n\rNOT_SUPPORTED\x10\x06\x12\x08\n\x04\x42USY\x10\x07\x12\x11\n\rINVALID_STATE\x10\x08\x12\x11\n\rSERIALIZATION\x10\t\x12\x13\n\x0f\x44\x45SERIALIZATION\x10\n\x12\r\n\tSEND_DATA\x10\x0b\x12\r\n\tRECV_DATA\x10\x0c\x12\x10\n\x0cINVALID_SIZE\x10\r\x12\n\n\x06\x43LOSED\x10\x0e\x12\r\n\tNOT_FOUND\x10\x0f\x12\x15\n\x11VALIDATION_FAILED\x10\x10\x12\x0e\n\nCONNECTION\x10\x11\x12\x11\n\rDISCONNECTION\x10\x12\x12\r\n\tEXCEPTION\x10\x13\x12\x0f\n\x0bINVALID_ARG\x10\x14\x12\r\n\tNO_MEMORY\x10\x15\x12\x0b\n\x07TIMEOUT\x10\x16\x12\x0c\n\x08MONGOOSE\x10\x17\x12\x11\n\rIMPOSSIBLE_OP\x10\x18\x12\x0c\n\x08\x43HECKSUM\x10\x19\x12\x16\n\x12PROTOCOL_VIOLATION\x10\x1a\x12\r\n\tDATA_LOSS\x10\x1b\x12\x12\n\x0eINVALID_HEADER\x10\x1c\x12\x11\n\x04\x46\x41IL\x10\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x62\x06proto3'
)

_CIOTERR = _descriptor.EnumDescriptor(
  name='CiotErr',
  full_name='CiotErr',
  filename=None,
  file=DESCRIPTOR,
  create_key=_descriptor._internal_create_key,
  values=[
    _descriptor.EnumValueDescriptor(
      name='OK', index=0, number=0,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NULL_ARG', index=1, number=1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INVALID_ID', index=2, number=2,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INVALID_TYPE', index=3, number=3,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='OVERFLOW', index=4, number=4,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NOT_IMPLEMENTED', index=5, number=5,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NOT_SUPPORTED', index=6, number=6,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='BUSY', index=7, number=7,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INVALID_STATE', index=8, number=8,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SERIALIZATION', index=9, number=9,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='DESERIALIZATION', index=10, number=10,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='SEND_DATA', index=11, number=11,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='RECV_DATA', index=12, number=12,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INVALID_SIZE', index=13, number=13,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='CLOSED', index=14, number=14,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=15, number=15,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='VALIDATION_FAILED', index=16, number=16,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='CONNECTION', index=17, number=17,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='DISCONNECTION', index=18, number=18,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='EXCEPTION', index=19, number=19,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INVALID_ARG', index=20, number=20,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='NO_MEMORY', index=21, number=21,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='TIMEOUT', index=22, number=22,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='MONGOOSE', index=23, number=23,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='IMPOSSIBLE_OP', index=24, number=24,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='CHECKSUM', index=25, number=25,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='PROTOCOL_VIOLATION', index=26, number=26,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='DATA_LOSS', index=27, number=27,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='INVALID_HEADER', index=28, number=28,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
    _descriptor.EnumValueDescriptor(
      name='FAIL', index=29, number=-1,
      serialized_options=None,
      type=None,
      create_key=_descriptor._internal_create_key),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=31,
  serialized_end=537,
)
_sym_db.RegisterEnumDescriptor(_CIOTERR)

CiotErr = enum_type_wrapper.EnumTypeWrapper(_CIOTERR)
OK = 0
NULL_ARG = 1
INVALID_ID = 2
INVALID_TYPE = 3
OVERFLOW = 4
NOT_IMPLEMENTED = 5
NOT_SUPPORTED = 6
BUSY = 7
INVALID_STATE = 8
SERIALIZATION = 9
DESERIALIZATION = 10
SEND_DATA = 11
RECV_DATA = 12
INVALID_SIZE = 13
CLOSED = 14
NOT_FOUND = 15
VALIDATION_FAILED = 16
CONNECTION = 17
DISCONNECTION = 18
EXCEPTION = 19
INVALID_ARG = 20
NO_MEMORY = 21
TIMEOUT = 22
MONGOOSE = 23
IMPOSSIBLE_OP = 24
CHECKSUM = 25
PROTOCOL_VIOLATION = 26
DATA_LOSS = 27
INVALID_HEADER = 28
FAIL = -1


DESCRIPTOR.enum_types_by_name['CiotErr'] = _CIOTERR
_sym_db.RegisterFileDescriptor(DESCRIPTOR)


# @@protoc_insertion_point(module_scope)
